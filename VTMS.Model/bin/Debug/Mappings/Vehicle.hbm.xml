<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" default-lazy="false">
	<class name="VTMS.Model.Entities.Vehicle,VTMS.Model.Entities" table="vehicle" lazy="false">

		<!-- Primary Key(s) -->
		<id name="Serial" column="serial" type="String">
			<generator class="assigned"/>
		</id>
		
		<!-- Properties -->
    <many-to-one column="originid" class="VTMS.Model.Entities.Customer,VTMS.Model.Entities" name="OriginCustomer" cascade="none" unique="true"/>
		<property column="originpic" type="Byte[](1048576)" name="Originpic" />
    <many-to-one column="currentid" class="VTMS.Model.Entities.Customer,VTMS.Model.Entities" name="CurrentCustomer" cascade="none" unique="true"/>
		<property column="currentpic" type="Byte[](1048576)" name="Currentpic" />
		<property column="invoice" type="String" name="Invoice" length="20" />
		<property column="license" type="String" name="License" not-null="true" length="5" />
		<property column="vin" type="String" name="Vin" not-null="true" length="20" />
    <many-to-one column="vehicletype" class="VTMS.Model.Entities.Vehicletype,VTMS.Model.Entities" name="Vehicletype" cascade="none" unique="true" />
		<property column="brand" type="String" name="Brand" length="50" />
		<property column="certificate" type="String" name="Certificate" length="20" />
		<property column="register" type="String" name="Register" not-null="true" length="6" />
		<property column="certification" type="String" name="Certification" not-null="true" length="8" />
		<property column="actual" type="String" name="Actual" not-null="true" />
		<property column="transactions" type="String" name="Transactions" not-null="true" />
		<property column="department" type="String" name="Department" not-null="true" length="50" />
    <many-to-one column="company" class="VTMS.Model.Entities.Company,VTMS.Model.Entities" name="Company" cascade="none" unique="true" />
    <many-to-one column="saver" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Saver" cascade="none" lazy="false"/>
		<property column="save_date" type="DateTime" name="SaveDate" not-null="true" />
    <many-to-one column="updater" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Updater" cascade="none" lazy="false"/>
    <property column="update_date" type="DateTime" name="UpdateDate" />
    <many-to-one column="recorder" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Recorder" cascade="none" lazy="false"/>
		<property column="record_date" type="DateTime" name="RecordDate" />
		<property column="isrecorded" type="Boolean" name="Isrecorded" />
    <many-to-one column="charger" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Charger" cascade="none" lazy="false"/>
		<property column="charge_date" type="DateTime" name="ChargeDate" />
		<property column="ischarged" type="Boolean" name="Ischarged" />
    <many-to-one column="printer" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Printer" cascade="none" lazy="false"/>
		<property column="print_date" type="DateTime" name="PrintDate" />
		<property column="isprinted" type="Boolean" name="Isprinted" />
    <many-to-one column="refunder" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Refunder" cascade="none" lazy="false"/>
		<property column="refund_date" type="DateTime" name="RefundDate" />
		<property column="isrefund" type="Boolean" name="Isrefund" />
    <many-to-one column="granter" class="VTMS.Model.Entities.Users,VTMS.Model.Entities" name="Granter" cascade="none" lazy="false"/>
    
		<property column="grant_date" type="DateTime" name="GrantDate" />
		<property column="isgrant" type="Boolean" name="Isgrant" />
    <property column="firstpic" type="Byte[](2048576)" name="Firstpic" />
    <property column="secondpic" type="Byte[](2048576)" name="Secondpic" />
    <property column="thirdpic" type="Byte[](2048576)" name="Thirdpic" />
    <property column="forthpic" type="Byte[](2048576)" name="Forthpic" />
	</class>
  <sql-query name="GetLatestSerial">
    SELECT IF(NOT EXISTS(SELECT * FROM vtms.vehicle 
      WHERE serial = CONCAT(DATE_FORMAT(CURRENT_DATE,'%Y%m%d'),'001')),CONCAT(DATE_FORMAT(CURRENT_DATE,'%Y%m%d'),'001'),
        (SELECT MAX(serial)+1 FROM vtms.vehicle)) as serial
  </sql-query>
  <sql-query name="SearchFirst20Rows">
    select Vehicle.Serial Serial, OriginCustomer.UserId OriginId, OriginCustomer.Name OriginName, CurrentCustomer.UserId CurrentId, CurrentCustomer.Name CurrentName,
    Vehicletype.Name VehicleType, Vehicle.License License, Vehicle.Brand Brand from Vehicle Vehicle
    inner join customer OriginCustomer on Vehicle.originid = OriginCustomer.id
    inner join customer CurrentCustomer on Vehicle.currentid = CurrentCustomer.id
    inner join Vehicletype Vehicletype on Vehicle.vehicletype = vehicletype.id
    order by serial desc limit 20
  </sql-query>
  <sql-query name="SearchResult">
    select Vehicle.Serial Serial, OriginCustomer.UserId OriginId, OriginCustomer.Name OriginName,
    CurrentCustomer.UserId CurrentId, CurrentCustomer.Name CurrentName,
    Vehicletype.Name VehicleType, Vehicle.License License, Vehicle.Brand Brand from Vehicle Vehicle
    inner join customer OriginCustomer on Vehicle.originid = OriginCustomer.id
    inner join customer CurrentCustomer on Vehicle.currentid = CurrentCustomer.id
    inner join Vehicletype Vehicletype on Vehicle.vehicletype = vehicletype.id
    where (OriginCustomer.Name = :customerName or CurrentCustomer.Name = :customerName or :customerName = '')
    and (OriginCustomer.UserId = :customerId or CurrentCustomer.UserId = :customerId or :customerId = '')
    and (Vehicle.serial = :serial or :serial = '') and (Vehicle.license = :license or :license = '')
    order by Vehicle.serial desc
  </sql-query>
  <sql-query name="CaculateCompanyReport">
    select Serial,Brand,Register,Transactions,Actual from Vehicle
    inner join Company on Vehicle.company = Company.id
    where Company.Id = :company and save_date > :startDate and :endDate > save_date
  </sql-query>
  <sql-query name="CaculateVehicleReport">
    select Serial, Register, Vehicletype.Name Vehicletype, Brand, Transactions, Actual from Vehicle
    inner join Vehicletype on Vehicletype.id = Vehicle.vehicletype
    where save_date > :startDate and :endDate > save_date and brand = :brand
  </sql-query>
  <sql-query name="CaculateTradeDailyPrinted">
    Select save_date SaveDate,Serial,License,Actual,Company from Vehicle where save_date > :startDate and :endDate > save_date and charge_date > :startDate and isprinted = true order by charge_date
  </sql-query>
  <sql-query name="CaculateTradeDailyCharged">
    Select save_date SaveDate,Serial,License,Actual,Company from Vehicle where save_date > :startDate and :endDate > save_date and charge_date > :startDate and ischarged = true order by charge_date
  </sql-query>
  <sql-query name="CaculateTradeDailyAll">
    Select save_date SaveDate,Serial,License,Actual,Company from Vehicle where save_date > :startDate and :endDate > save_date order by charge_date
  </sql-query>
  <sql-query name="CaculateTradeMonthReport">
    select DATE_FORMAT(Save_Date,'%Y年%m月%d日') SaveDate, sum(Actual) Money, count(*) TotalCount from Vehicle where save_date > :startDate and :endDate > save_date group by DATE_FORMAT(save_date,'%Y年%m月%d日') order by DATE_FORMAT(save_date,'%Y年%m月%d日')
  </sql-query>
  <sql-query name="CaculateTradeYearReport">
    select DATE_FORMAT(Save_Date,'%Y年%m月') SaveDate, sum(Actual) Money, count(*) TotalCount from Vehicle where save_date > :startDate and :endDate > save_date group by DATE_FORMAT(save_date,'%Y年%m月') order by DATE_FORMAT(save_date,'%Y年%m月')
  </sql-query>
  <sql-query name="CaculateTaxReport">
    Select Save_Date SaveDate,License,Register,Brand,Actual,Serial,OriginCustomer.Name OriginName from Vehicle
    inner join Customer OriginCustomer on originid = OriginCustomer.id
    where CHARACTER_LENGTH(OriginCustomer.Name) > 4 and Save_Date > :startDate and :endDate > Save_Date and Charge_Date > :startDate
  </sql-query>
</hibernate-mapping>
