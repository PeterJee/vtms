/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace VTMS.Model.Entities
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class Apply 
	{
		#region Private Members
		
		// Variabili di stato
		private bool _isChanged;
		private bool _isDeleted;

		// Primary Key(s) 
		private string _serial; 
		
		// Properties 
		private string _category; 
		private string _license; 
		private string _platerenew; 
		private string _platechange; 
		private string _driverrenew; 
		private string _driverchange; 
		private string _licenseapply; 
		private string _licenserenew; 
		private string _licensechange; 
		private string _signapply; 
		private string _signrenew; 
		private string _signchange; 
		private string _ownername; 
		private string _owneraddress; 
		private string _ownerpostcode; 
		private string _ownerphone; 
		private string _owneremail; 
		private string _ownermobile; 
		private string _agentname; 
		private string _agentaddress; 
		private string _agentpostcode; 
		private string _agentphone; 
		private string _agentemail; 
		private string _handlername; 
		private string _handlerphone; 
		private string _saver; 
		private DateTime _save_date; 
		private string _printer; 
		private DateTime _print_date; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public Apply()
		{
			_serial = null; 
			_category = null; 
			_license = null; 
			_platerenew = null; 
			_platechange = null; 
			_driverrenew = null; 
			_driverchange = null; 
			_licenseapply = null; 
			_licenserenew = null; 
			_licensechange = null; 
			_signapply = null; 
			_signrenew = null; 
			_signchange = null; 
			_ownername = null; 
			_owneraddress = null; 
			_ownerpostcode = null; 
			_ownerphone = null; 
			_owneremail = null; 
			_ownermobile = null; 
			_agentname = null; 
			_agentaddress = null; 
			_agentpostcode = null; 
			_agentphone = null; 
			_agentemail = null; 
			_handlername = null; 
			_handlerphone = null; 
			_saver = null; 
			_save_date = DateTime.MinValue; 
			_printer = null; 
			_print_date = DateTime.MinValue; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public Apply(string serial, string category, string license, string platerenew, string platechange, string driverrenew, string driverchange, string licenseapply, string licenserenew, string licensechange, string signapply, string signrenew, string signchange, string ownername, string owneraddress, string ownerpostcode, string ownerphone, string owneremail, string ownermobile, string agentname, string agentaddress, string agentpostcode, string agentphone, string agentemail, string handlername, string handlerphone, string saver, DateTime save_date, string printer, DateTime print_date)
		{
			_serial = serial; 
			_category = category; 
			_license = license; 
			_platerenew = platerenew; 
			_platechange = platechange; 
			_driverrenew = driverrenew; 
			_driverchange = driverchange; 
			_licenseapply = licenseapply; 
			_licenserenew = licenserenew; 
			_licensechange = licensechange; 
			_signapply = signapply; 
			_signrenew = signrenew; 
			_signchange = signchange; 
			_ownername = ownername; 
			_owneraddress = owneraddress; 
			_ownerpostcode = ownerpostcode; 
			_ownerphone = ownerphone; 
			_owneremail = owneremail; 
			_ownermobile = ownermobile; 
			_agentname = agentname; 
			_agentaddress = agentaddress; 
			_agentpostcode = agentpostcode; 
			_agentphone = agentphone; 
			_agentemail = agentemail; 
			_handlername = handlername; 
			_handlerphone = handlerphone; 
			_saver = saver; 
			_save_date = save_date; 
			_printer = printer; 
			_print_date = print_date; 
		}
		
		#endregion // End Full Constructor
		
		#region Required Fields Only Constructor
		
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Apply(string serial, string saver, DateTime save_date)
		{
			_serial = serial; 
			_category = null; 
			_license = null; 
			_platerenew = null; 
			_platechange = null; 
			_driverrenew = null; 
			_driverchange = null; 
			_licenseapply = null; 
			_licenserenew = null; 
			_licensechange = null; 
			_signapply = null; 
			_signrenew = null; 
			_signchange = null; 
			_ownername = null; 
			_owneraddress = null; 
			_ownerpostcode = null; 
			_ownerphone = null; 
			_owneremail = null; 
			_ownermobile = null; 
			_agentname = null; 
			_agentaddress = null; 
			_agentpostcode = null; 
			_agentphone = null; 
			_agentemail = null; 
			_handlername = null; 
			_handlerphone = null; 
			_saver = saver; 
			_save_date = save_date; 
			_printer = null; 
			_print_date = DateTime.MinValue; 
		}
		
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Serial
		{
			get { return _serial; }
			set	
			{
				if ( value != null )
					if( value.Length > 15)
						throw new ArgumentOutOfRangeException("Invalid value for Serial", value, value.ToString());
				
				_isChanged |= (_serial != value); _serial = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Category
		{
			get { return _category; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for Category", value, value.ToString());
				
				_isChanged |= (_category != value); _category = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string License
		{
			get { return _license; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for License", value, value.ToString());
				
				_isChanged |= (_license != value); _license = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string PlateRenew
		{
			get { return _platerenew; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for PlateRenew", value, value.ToString());
				
				_isChanged |= (_platerenew != value); _platerenew = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string PlateChange
		{
			get { return _platechange; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for PlateChange", value, value.ToString());
				
				_isChanged |= (_platechange != value); _platechange = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string DriverRenew
		{
			get { return _driverrenew; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for DriverRenew", value, value.ToString());
				
				_isChanged |= (_driverrenew != value); _driverrenew = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string DriverChange
		{
			get { return _driverchange; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for DriverChange", value, value.ToString());
				
				_isChanged |= (_driverchange != value); _driverchange = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string LicenseApply
		{
			get { return _licenseapply; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for LicenseApply", value, value.ToString());
				
				_isChanged |= (_licenseapply != value); _licenseapply = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string LicenseRenew
		{
			get { return _licenserenew; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for LicenseRenew", value, value.ToString());
				
				_isChanged |= (_licenserenew != value); _licenserenew = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string LicenseChange
		{
			get { return _licensechange; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for LicenseChange", value, value.ToString());
				
				_isChanged |= (_licensechange != value); _licensechange = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string SignApply
		{
			get { return _signapply; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for SignApply", value, value.ToString());
				
				_isChanged |= (_signapply != value); _signapply = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string SignRenew
		{
			get { return _signrenew; }
			set	
			{
				if ( value != null )
					if( value.Length > 5)
						throw new ArgumentOutOfRangeException("Invalid value for SignRenew", value, value.ToString());
				
				_isChanged |= (_signrenew != value); _signrenew = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string SignChange
		{
			get { return _signchange; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for SignChange", value, value.ToString());
				
				_isChanged |= (_signchange != value); _signchange = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerName
		{
			get { return _ownername; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerName", value, value.ToString());
				
				_isChanged |= (_ownername != value); _ownername = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerAddress
		{
			get { return _owneraddress; }
			set	
			{
				if ( value != null )
					if( value.Length > 200)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerAddress", value, value.ToString());
				
				_isChanged |= (_owneraddress != value); _owneraddress = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerPostcode
		{
			get { return _ownerpostcode; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerPostcode", value, value.ToString());
				
				_isChanged |= (_ownerpostcode != value); _ownerpostcode = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerPhone
		{
			get { return _ownerphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerPhone", value, value.ToString());
				
				_isChanged |= (_ownerphone != value); _ownerphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerEmail
		{
			get { return _owneremail; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerEmail", value, value.ToString());
				
				_isChanged |= (_owneremail != value); _owneremail = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerMobile
		{
			get { return _ownermobile; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerMobile", value, value.ToString());
				
				_isChanged |= (_ownermobile != value); _ownermobile = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentName
		{
			get { return _agentname; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for AgentName", value, value.ToString());
				
				_isChanged |= (_agentname != value); _agentname = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentAddress
		{
			get { return _agentaddress; }
			set	
			{
				if ( value != null )
					if( value.Length > 200)
						throw new ArgumentOutOfRangeException("Invalid value for AgentAddress", value, value.ToString());
				
				_isChanged |= (_agentaddress != value); _agentaddress = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentPostcode
		{
			get { return _agentpostcode; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for AgentPostcode", value, value.ToString());
				
				_isChanged |= (_agentpostcode != value); _agentpostcode = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentPhone
		{
			get { return _agentphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for AgentPhone", value, value.ToString());
				
				_isChanged |= (_agentphone != value); _agentphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentEmail
		{
			get { return _agentemail; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for AgentEmail", value, value.ToString());
				
				_isChanged |= (_agentemail != value); _agentemail = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string HandlerName
		{
			get { return _handlername; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for HandlerName", value, value.ToString());
				
				_isChanged |= (_handlername != value); _handlername = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string HandlerPhone
		{
			get { return _handlerphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 20)
						throw new ArgumentOutOfRangeException("Invalid value for HandlerPhone", value, value.ToString());
				
				_isChanged |= (_handlerphone != value); _handlerphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Saver
		{
			get { return _saver; }
			set	
			{
				if ( value != null )
					if( value.Length > 15)
						throw new ArgumentOutOfRangeException("Invalid value for Saver", value, value.ToString());
				
				_isChanged |= (_saver != value); _saver = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime SaveDate
		{
			get { return _save_date; }
			set { _isChanged |= (_save_date != value); _save_date = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Printer
		{
			get { return _printer; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for Printer", value, value.ToString());
				
				_isChanged |= (_printer != value); _printer = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime PrintDate
		{
			get { return _print_date; }
			set { _isChanged |= (_print_date != value); _print_date = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		#region Equals And HashCode Overrides
		
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			Apply castObj = (Apply)obj; 
			return ( castObj != null ) &&
				( this._serial == castObj.Serial );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{ 
			int hash = 57; 
			hash = 27 * hash * this._serial.GetHashCode();
					
			return hash;		
			
		}
		
		#endregion
		
	}
}