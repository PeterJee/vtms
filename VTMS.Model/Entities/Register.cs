/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace VTMS.Model.Entities
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class Register 
	{
		#region Private Members
		
		// Variabili di stato
		private bool _isChanged;
		private bool _isDeleted;

		// Primary Key(s) 
		private string _serial; 
		
		// Properties 
		private string _category; 
		private string _license; 
		private string _apply; 
		private string _revoke; 
		private string _brand; 
		private string _vin; 
		private string _obtain; 
		private string _purpose; 
		private string _ownername; 
		private string _owneraddress; 
		private string _ownerpostcode; 
		private string _ownerphone; 
		private string _owneremail; 
		private string _ownermobile; 
		private string _province; 
		private string _department; 
		private string _agentname; 
		private string _agentaddress; 
		private string _agentpostcode; 
		private string _agentphone; 
		private string _agentemail; 
		private string _handlername; 
		private string _handlerphone; 
		private string _saver; 
		private DateTime _save_date; 
		private string _printer; 
		private DateTime _print_date; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public Register()
		{
			_serial = String.Empty; 
			_category = String.Empty; 
			_license = String.Empty; 
			_apply = String.Empty; 
			_revoke = String.Empty; 
			_brand = String.Empty; 
			_vin = String.Empty; 
			_obtain = String.Empty; 
			_purpose = String.Empty; 
			_ownername = String.Empty; 
			_owneraddress = String.Empty; 
			_ownerpostcode = String.Empty; 
			_ownerphone = String.Empty; 
			_owneremail = String.Empty; 
			_ownermobile = String.Empty; 
			_province = String.Empty; 
			_department = String.Empty; 
			_agentname = String.Empty; 
			_agentaddress = String.Empty; 
			_agentpostcode = String.Empty; 
			_agentphone = String.Empty; 
			_agentemail = String.Empty; 
			_handlername = String.Empty; 
			_handlerphone = String.Empty; 
			_saver = String.Empty; 
			_save_date = DateTime.MinValue; 
			_printer = String.Empty; 
			_print_date = DateTime.MinValue; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public Register(string serial, string category, string license, string apply, string revoke, string brand, string vin, string obtain, string purpose, string ownername, string owneraddress, string ownerpostcode, string ownerphone, string owneremail, string ownermobile, string province, string department, string agentname, string agentaddress, string agentpostcode, string agentphone, string agentemail, string handlername, string handlerphone, string saver, DateTime save_date, string printer, DateTime print_date)
		{
			_serial = serial; 
			_category = category; 
			_license = license; 
			_apply = apply; 
			_revoke = revoke; 
			_brand = brand; 
			_vin = vin; 
			_obtain = obtain; 
			_purpose = purpose; 
			_ownername = ownername; 
			_owneraddress = owneraddress; 
			_ownerpostcode = ownerpostcode; 
			_ownerphone = ownerphone; 
			_owneremail = owneremail; 
			_ownermobile = ownermobile; 
			_province = province; 
			_department = department; 
			_agentname = agentname; 
			_agentaddress = agentaddress; 
			_agentpostcode = agentpostcode; 
			_agentphone = agentphone; 
			_agentemail = agentemail; 
			_handlername = handlername; 
			_handlerphone = handlerphone; 
			_saver = saver; 
			_save_date = save_date; 
			_printer = printer; 
			_print_date = print_date; 
		}
		
		#endregion // End Full Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Serial
		{
			get { return _serial; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Serial", value, value.ToString());
				
				_isChanged |= (_serial != value); _serial = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Category
		{
			get { return _category; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Category", value, value.ToString());
				
				_isChanged |= (_category != value); _category = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string License
		{
			get { return _license; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for License", value, value.ToString());
				
				_isChanged |= (_license != value); _license = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Apply
		{
			get { return _apply; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Apply", value, value.ToString());
				
				_isChanged |= (_apply != value); _apply = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Revoke
		{
			get { return _revoke; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Revoke", value, value.ToString());
				
				_isChanged |= (_revoke != value); _revoke = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Brand
		{
			get { return _brand; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Brand", value, value.ToString());
				
				_isChanged |= (_brand != value); _brand = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Vin
		{
			get { return _vin; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Vin", value, value.ToString());
				
				_isChanged |= (_vin != value); _vin = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Obtain
		{
			get { return _obtain; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Obtain", value, value.ToString());
				
				_isChanged |= (_obtain != value); _obtain = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Purpose
		{
			get { return _purpose; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Purpose", value, value.ToString());
				
				_isChanged |= (_purpose != value); _purpose = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerName
		{
			get { return _ownername; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerName", value, value.ToString());
				
				_isChanged |= (_ownername != value); _ownername = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerAddress
		{
			get { return _owneraddress; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerAddress", value, value.ToString());
				
				_isChanged |= (_owneraddress != value); _owneraddress = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerPostcode
		{
			get { return _ownerpostcode; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerPostcode", value, value.ToString());
				
				_isChanged |= (_ownerpostcode != value); _ownerpostcode = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerPhone
		{
			get { return _ownerphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerPhone", value, value.ToString());
				
				_isChanged |= (_ownerphone != value); _ownerphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerEmail
		{
			get { return _owneremail; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerEmail", value, value.ToString());
				
				_isChanged |= (_owneremail != value); _owneremail = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string OwnerMobile
		{
			get { return _ownermobile; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for OwnerMobile", value, value.ToString());
				
				_isChanged |= (_ownermobile != value); _ownermobile = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Province
		{
			get { return _province; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Province", value, value.ToString());
				
				_isChanged |= (_province != value); _province = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Department
		{
			get { return _department; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for Department", value, value.ToString());
				
				_isChanged |= (_department != value); _department = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentName
		{
			get { return _agentname; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for AgentName", value, value.ToString());
				
				_isChanged |= (_agentname != value); _agentname = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentAddress
		{
			get { return _agentaddress; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for AgentAddress", value, value.ToString());
				
				_isChanged |= (_agentaddress != value); _agentaddress = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentPostcode
		{
			get { return _agentpostcode; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for AgentPostcode", value, value.ToString());
				
				_isChanged |= (_agentpostcode != value); _agentpostcode = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentPhone
		{
			get { return _agentphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for AgentPhone", value, value.ToString());
				
				_isChanged |= (_agentphone != value); _agentphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string AgentEmail
		{
			get { return _agentemail; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for AgentEmail", value, value.ToString());
				
				_isChanged |= (_agentemail != value); _agentemail = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string HandlerName
		{
			get { return _handlername; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for HandlerName", value, value.ToString());
				
				_isChanged |= (_handlername != value); _handlername = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string HandlerPhone
		{
			get { return _handlerphone; }
			set	
			{
				if ( value != null )
					if( value.Length > 50)
						throw new ArgumentOutOfRangeException("Invalid value for HandlerPhone", value, value.ToString());
				
				_isChanged |= (_handlerphone != value); _handlerphone = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Saver
		{
			get { return _saver; }
			set	
			{
				if ( value != null )
					if( value.Length > 15)
						throw new ArgumentOutOfRangeException("Invalid value for Saver", value, value.ToString());
				
				_isChanged |= (_saver != value); _saver = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime SaveDate
		{
			get { return _save_date; }
			set { _isChanged |= (_save_date != value); _save_date = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Printer
		{
			get { return _printer; }
			set	
			{
				if ( value != null )
					if( value.Length > 10)
						throw new ArgumentOutOfRangeException("Invalid value for Printer", value, value.ToString());
				
				_isChanged |= (_printer != value); _printer = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime PrintDate
		{
			get { return _print_date; }
			set { _isChanged |= (_print_date != value); _print_date = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}